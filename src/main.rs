#![allow(unused)]

use sqlx::postgres::{PgPoolOptions, PgRow};
use sqlx::{FromRow, Row};
use std::env;

mod models;
use models::Bookstore;

#[tokio::main]
async fn main() -> Result<(), sqlx::Error> {
   
 
    // Connect Pool
    // let databaseurl = env::var("DATABASE_URL").expect("Não foi informada a conexão com o banco de dados"); 
    let pool = PgPoolOptions::new()
        .max_connections(5)
        // .connect(&databaseurl)
        // .connect("postgres://ricardodarocha:masterkey@ricardodarocha.postgresql.dbaas.com.br:5432/ricardodarocha")
        .connect("postgres://postgres:masterkey@localhost:5432/proto")
        .await?;

    // Create Table if not exists
    sqlx::query(
        r#"CREATE TABLE IF NOT EXISTS bookstore (
            id INT GENERATED BY DEFAULT AS IDENTITY,
            nome VARCHAR(255) NOT NULL,
            autor VARCHAR(255) NOT NULL,
            editora VARCHAR(255) NOT NULL,
            ano VARCHAR(4) NOT NULL,
            codigobarras VARCHAR(31) NOT NULL
        );"#
    )
    .execute(&pool)
    .await?;
    // Insert into
    let row: (i32, String) = sqlx::query_as(
        r#"insert into bookstore 
            (nome, autor, editora, ano, codigobarras) 
            VALUES ($1, $2, $3, $4, $5)
            returning id, nome"#)
        .bind("O velho e o mar")
        .bind("Ernest Hemingway")
        .bind("Bertrand")
        .bind("1952")
        .bind("39a7a2f2")

        .fetch_one(&pool)
        .await?;

        println!("Criado {:?}", row);

    // Select
    let rows = sqlx::query(
        r#"select * from bookstore"#
    )
    .fetch_all(&pool)
    .await?;

    let results = rows
        .iter()
        .map(|row| format!("{} - {}", row.get::<i32, _>("id"), row.get::<String, _>("nome") ))  
        .collect::<Vec<String>>()
        .join(", ");

        println!("{}", results);

    // Map
    let selectquery = sqlx::query(
        r#"select id
        , nome
        , autor
        , editora
        , ano
        , codigobarras
         from bookstore"#
    );
    let list: Vec<Bookstore> = selectquery
    .map(|row: PgRow| Bookstore {
        id: row.get("id"),
        nome: row.get("nome"),
        autor: row.get("autor"),
        editora: row.get("editora"),
        ano: row.get("ano"),
        codigobarras: row.get("codigobarras")
    })
    .fetch_all(&pool)
    .await?;

    // query_as 
    let selectquery = sqlx::query_as::<_, Bookstore>(
        r#"select id
        , nome
        , autor
        , editora
        , ano
        , codigobarras
         from bookstore"#
    );
    let list: Vec<Bookstore> = selectquery
    .fetch_all(&pool)
    .await?;

    Ok(())
}
